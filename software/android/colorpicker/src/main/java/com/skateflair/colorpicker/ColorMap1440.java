package com.skateflair.colorpicker;

/**
 * Created by myron on 2/27/16.
 */
public class ColorMap1440 {

    public static final int HUE_GRADIENT_1440_STEP_TABLE[] = {
            // 0 to 59 degrees
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            // 60 to 119 degrees
            0xff, 0xfe, 0xfd, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6,
            0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0, 0xee, 0xed, 0xec, 0xeb,
            0xea, 0xe9, 0xe8, 0xe7, 0xe6, 0xe5, 0xe4, 0xe3, 0xe2, 0xe1,
            0xe0, 0xdf, 0xdd, 0xdc, 0xdb, 0xda, 0xd9, 0xd8, 0xd7, 0xd6,
            0xd5, 0xd4, 0xd3, 0xd2, 0xd1, 0xd0, 0xcf, 0xce, 0xcc, 0xcb,
            0xca, 0xc9, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4, 0xc3, 0xc2, 0xc1,
            0xc0, 0xbf, 0xbe, 0xbd, 0xbb, 0xba, 0xb9, 0xb8, 0xb7, 0xb6,
            0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac,
            0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4, 0xa3, 0xa2, 0xa1,
            0xa0, 0x9f, 0x9e, 0x9d, 0x9c, 0x9b, 0x99, 0x98, 0x97, 0x96,
            0x95, 0x94, 0x93, 0x92, 0x91, 0x90, 0x8f, 0x8e, 0x8d, 0x8c,
            0x8b, 0x8a, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81,
            0x80, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x77, 0x76,
            0x75, 0x74, 0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c,
            0x6b, 0x6a, 0x69, 0x68, 0x66, 0x65, 0x64, 0x63, 0x62, 0x61,
            0x60, 0x5f, 0x5e, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57,
            0x55, 0x54, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4c,
            0x4b, 0x4a, 0x49, 0x48, 0x47, 0x46, 0x44, 0x43, 0x42, 0x41,
            0x40, 0x3f, 0x3e, 0x3d, 0x3c, 0x3b, 0x3a, 0x39, 0x38, 0x37,
            0x36, 0x35, 0x33, 0x32, 0x31, 0x30, 0x2f, 0x2e, 0x2d, 0x2c,
            0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x22, 0x21,
            0x20, 0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17,
            0x16, 0x15, 0x14, 0x13, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c,
            0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02,
            // 120 to 239 degrees
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            // 240 to 299 degrees
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
            0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e,
            0x1f, 0x20, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,
            0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x33, 0x34,
            0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e,
            0x3f, 0x40, 0x41, 0x42, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
            0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
            0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e,
            0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x66, 0x67, 0x68, 0x69,
            0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73,
            0x74, 0x75, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e,
            0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x88, 0x89,
            0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93,
            0x94, 0x95, 0x96, 0x97, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e,
            0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8,
            0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
            0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xbb, 0xbc, 0xbd, 0xbe,
            0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8,
            0xc9, 0xca, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3,
            0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdd, 0xde,
            0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8,
            0xe9, 0xea, 0xeb, 0xec, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3,
            0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,

            // 300 to 359
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    };

    public static final int HUE_ARGB_COLOR_1440_STEP_TABLE[] = {
            0xffff0000, 0xffff0001, 0xffff0002, 0xffff0003, 0xffff0004, 0xffff0005,
            0xffff0006, 0xffff0007, 0xffff0008, 0xffff0009, 0xffff000a, 0xffff000b,
            0xffff000c, 0xffff000d, 0xffff000e, 0xffff000f, 0xffff0011, 0xffff0012,
            0xffff0013, 0xffff0014, 0xffff0015, 0xffff0016, 0xffff0017, 0xffff0018,
            0xffff0019, 0xffff001a, 0xffff001b, 0xffff001c, 0xffff001d, 0xffff001e,
            0xffff001f, 0xffff0020, 0xffff0022, 0xffff0023, 0xffff0024, 0xffff0025,
            0xffff0026, 0xffff0027, 0xffff0028, 0xffff0029, 0xffff002a, 0xffff002b,
            0xffff002c, 0xffff002d, 0xffff002e, 0xffff002f, 0xffff0030, 0xffff0031,
            0xffff0033, 0xffff0034, 0xffff0035, 0xffff0036, 0xffff0037, 0xffff0038,
            0xffff0039, 0xffff003a, 0xffff003b, 0xffff003c, 0xffff003d, 0xffff003e,
            0xffff003f, 0xffff0040, 0xffff0041, 0xffff0042, 0xffff0044, 0xffff0045,
            0xffff0046, 0xffff0047, 0xffff0048, 0xffff0049, 0xffff004a, 0xffff004b,
            0xffff004c, 0xffff004d, 0xffff004e, 0xffff004f, 0xffff0050, 0xffff0051,
            0xffff0052, 0xffff0053, 0xffff0055, 0xffff0056, 0xffff0057, 0xffff0058,
            0xffff0059, 0xffff005a, 0xffff005b, 0xffff005c, 0xffff005d, 0xffff005e,
            0xffff005f, 0xffff0060, 0xffff0061, 0xffff0062, 0xffff0063, 0xffff0064,
            0xffff0066, 0xffff0067, 0xffff0068, 0xffff0069, 0xffff006a, 0xffff006b,
            0xffff006c, 0xffff006d, 0xffff006e, 0xffff006f, 0xffff0070, 0xffff0071,
            0xffff0072, 0xffff0073, 0xffff0074, 0xffff0075, 0xffff0077, 0xffff0078,
            0xffff0079, 0xffff007a, 0xffff007b, 0xffff007c, 0xffff007d, 0xffff007e,
            0xffff007f, 0xffff0080, 0xffff0081, 0xffff0082, 0xffff0083, 0xffff0084,
            0xffff0085, 0xffff0086, 0xffff0088, 0xffff0089, 0xffff008a, 0xffff008b,
            0xffff008c, 0xffff008d, 0xffff008e, 0xffff008f, 0xffff0090, 0xffff0091,
            0xffff0092, 0xffff0093, 0xffff0094, 0xffff0095, 0xffff0096, 0xffff0097,
            0xffff0099, 0xffff009a, 0xffff009b, 0xffff009c, 0xffff009d, 0xffff009e,
            0xffff009f, 0xffff00a0, 0xffff00a1, 0xffff00a2, 0xffff00a3, 0xffff00a4,
            0xffff00a5, 0xffff00a6, 0xffff00a7, 0xffff00a8, 0xffff00aa, 0xffff00ab,
            0xffff00ac, 0xffff00ad, 0xffff00ae, 0xffff00af, 0xffff00b0, 0xffff00b1,
            0xffff00b2, 0xffff00b3, 0xffff00b4, 0xffff00b5, 0xffff00b6, 0xffff00b7,
            0xffff00b8, 0xffff00b9, 0xffff00bb, 0xffff00bc, 0xffff00bd, 0xffff00be,
            0xffff00bf, 0xffff00c0, 0xffff00c1, 0xffff00c2, 0xffff00c3, 0xffff00c4,
            0xffff00c5, 0xffff00c6, 0xffff00c7, 0xffff00c8, 0xffff00c9, 0xffff00ca,
            0xffff00cc, 0xffff00cd, 0xffff00ce, 0xffff00cf, 0xffff00d0, 0xffff00d1,
            0xffff00d2, 0xffff00d3, 0xffff00d4, 0xffff00d5, 0xffff00d6, 0xffff00d7,
            0xffff00d8, 0xffff00d9, 0xffff00da, 0xffff00db, 0xffff00dd, 0xffff00de,
            0xffff00df, 0xffff00e0, 0xffff00e1, 0xffff00e2, 0xffff00e3, 0xffff00e4,
            0xffff00e5, 0xffff00e6, 0xffff00e7, 0xffff00e8, 0xffff00e9, 0xffff00ea,
            0xffff00eb, 0xffff00ec, 0xffff00ee, 0xffff00ef, 0xffff00f0, 0xffff00f1,
            0xffff00f2, 0xffff00f3, 0xffff00f4, 0xffff00f5, 0xffff00f6, 0xffff00f7,
            0xffff00f8, 0xffff00f9, 0xffff00fa, 0xffff00fb, 0xffff00fc, 0xffff00fd,
            0xffff00ff, 0xfffe00ff, 0xfffd00ff, 0xfffc00ff, 0xfffb00ff, 0xfffa00ff,
            0xfff900ff, 0xfff800ff, 0xfff700ff, 0xfff600ff, 0xfff500ff, 0xfff400ff,
            0xfff300ff, 0xfff200ff, 0xfff100ff, 0xfff000ff, 0xffee00ff, 0xffed00ff,
            0xffec00ff, 0xffeb00ff, 0xffea00ff, 0xffe900ff, 0xffe800ff, 0xffe700ff,
            0xffe600ff, 0xffe500ff, 0xffe400ff, 0xffe300ff, 0xffe200ff, 0xffe100ff,
            0xffe000ff, 0xffdf00ff, 0xffdd00ff, 0xffdc00ff, 0xffdb00ff, 0xffda00ff,
            0xffd900ff, 0xffd800ff, 0xffd700ff, 0xffd600ff, 0xffd500ff, 0xffd400ff,
            0xffd300ff, 0xffd200ff, 0xffd100ff, 0xffd000ff, 0xffcf00ff, 0xffce00ff,
            0xffcc00ff, 0xffcb00ff, 0xffca00ff, 0xffc900ff, 0xffc800ff, 0xffc700ff,
            0xffc600ff, 0xffc500ff, 0xffc400ff, 0xffc300ff, 0xffc200ff, 0xffc100ff,
            0xffc000ff, 0xffbf00ff, 0xffbe00ff, 0xffbd00ff, 0xffbb00ff, 0xffba00ff,
            0xffb900ff, 0xffb800ff, 0xffb700ff, 0xffb600ff, 0xffb500ff, 0xffb400ff,
            0xffb300ff, 0xffb200ff, 0xffb100ff, 0xffb000ff, 0xffaf00ff, 0xffae00ff,
            0xffad00ff, 0xffac00ff, 0xffaa00ff, 0xffa900ff, 0xffa800ff, 0xffa700ff,
            0xffa600ff, 0xffa500ff, 0xffa400ff, 0xffa300ff, 0xffa200ff, 0xffa100ff,
            0xffa000ff, 0xff9f00ff, 0xff9e00ff, 0xff9d00ff, 0xff9c00ff, 0xff9b00ff,
            0xff9900ff, 0xff9800ff, 0xff9700ff, 0xff9600ff, 0xff9500ff, 0xff9400ff,
            0xff9300ff, 0xff9200ff, 0xff9100ff, 0xff9000ff, 0xff8f00ff, 0xff8e00ff,
            0xff8d00ff, 0xff8c00ff, 0xff8b00ff, 0xff8a00ff, 0xff8800ff, 0xff8700ff,
            0xff8600ff, 0xff8500ff, 0xff8400ff, 0xff8300ff, 0xff8200ff, 0xff8100ff,
            0xff8000ff, 0xff7f00ff, 0xff7e00ff, 0xff7d00ff, 0xff7c00ff, 0xff7b00ff,
            0xff7a00ff, 0xff7900ff, 0xff7700ff, 0xff7600ff, 0xff7500ff, 0xff7400ff,
            0xff7300ff, 0xff7200ff, 0xff7100ff, 0xff7000ff, 0xff6f00ff, 0xff6e00ff,
            0xff6d00ff, 0xff6c00ff, 0xff6b00ff, 0xff6a00ff, 0xff6900ff, 0xff6800ff,
            0xff6600ff, 0xff6500ff, 0xff6400ff, 0xff6300ff, 0xff6200ff, 0xff6100ff,
            0xff6000ff, 0xff5f00ff, 0xff5e00ff, 0xff5d00ff, 0xff5c00ff, 0xff5b00ff,
            0xff5a00ff, 0xff5900ff, 0xff5800ff, 0xff5700ff, 0xff5500ff, 0xff5400ff,
            0xff5300ff, 0xff5200ff, 0xff5100ff, 0xff5000ff, 0xff4f00ff, 0xff4e00ff,
            0xff4d00ff, 0xff4c00ff, 0xff4b00ff, 0xff4a00ff, 0xff4900ff, 0xff4800ff,
            0xff4700ff, 0xff4600ff, 0xff4400ff, 0xff4300ff, 0xff4200ff, 0xff4100ff,
            0xff4000ff, 0xff3f00ff, 0xff3e00ff, 0xff3d00ff, 0xff3c00ff, 0xff3b00ff,
            0xff3a00ff, 0xff3900ff, 0xff3800ff, 0xff3700ff, 0xff3600ff, 0xff3500ff,
            0xff3300ff, 0xff3200ff, 0xff3100ff, 0xff3000ff, 0xff2f00ff, 0xff2e00ff,
            0xff2d00ff, 0xff2c00ff, 0xff2b00ff, 0xff2a00ff, 0xff2900ff, 0xff2800ff,
            0xff2700ff, 0xff2600ff, 0xff2500ff, 0xff2400ff, 0xff2200ff, 0xff2100ff,
            0xff2000ff, 0xff1f00ff, 0xff1e00ff, 0xff1d00ff, 0xff1c00ff, 0xff1b00ff,
            0xff1a00ff, 0xff1900ff, 0xff1800ff, 0xff1700ff, 0xff1600ff, 0xff1500ff,
            0xff1400ff, 0xff1300ff, 0xff1100ff, 0xff1000ff, 0xff0f00ff, 0xff0e00ff,
            0xff0d00ff, 0xff0c00ff, 0xff0b00ff, 0xff0a00ff, 0xff0900ff, 0xff0800ff,
            0xff0700ff, 0xff0600ff, 0xff0500ff, 0xff0400ff, 0xff0300ff, 0xff0200ff,
            0xff0000ff, 0xff0001ff, 0xff0002ff, 0xff0003ff, 0xff0004ff, 0xff0005ff,
            0xff0006ff, 0xff0007ff, 0xff0008ff, 0xff0009ff, 0xff000aff, 0xff000bff,
            0xff000cff, 0xff000dff, 0xff000eff, 0xff000fff, 0xff0011ff, 0xff0012ff,
            0xff0013ff, 0xff0014ff, 0xff0015ff, 0xff0016ff, 0xff0017ff, 0xff0018ff,
            0xff0019ff, 0xff001aff, 0xff001bff, 0xff001cff, 0xff001dff, 0xff001eff,
            0xff001fff, 0xff0020ff, 0xff0022ff, 0xff0023ff, 0xff0024ff, 0xff0025ff,
            0xff0026ff, 0xff0027ff, 0xff0028ff, 0xff0029ff, 0xff002aff, 0xff002bff,
            0xff002cff, 0xff002dff, 0xff002eff, 0xff002fff, 0xff0030ff, 0xff0031ff,
            0xff0033ff, 0xff0034ff, 0xff0035ff, 0xff0036ff, 0xff0037ff, 0xff0038ff,
            0xff0039ff, 0xff003aff, 0xff003bff, 0xff003cff, 0xff003dff, 0xff003eff,
            0xff003fff, 0xff0040ff, 0xff0041ff, 0xff0042ff, 0xff0044ff, 0xff0045ff,
            0xff0046ff, 0xff0047ff, 0xff0048ff, 0xff0049ff, 0xff004aff, 0xff004bff,
            0xff004cff, 0xff004dff, 0xff004eff, 0xff004fff, 0xff0050ff, 0xff0051ff,
            0xff0052ff, 0xff0053ff, 0xff0055ff, 0xff0056ff, 0xff0057ff, 0xff0058ff,
            0xff0059ff, 0xff005aff, 0xff005bff, 0xff005cff, 0xff005dff, 0xff005eff,
            0xff005fff, 0xff0060ff, 0xff0061ff, 0xff0062ff, 0xff0063ff, 0xff0064ff,
            0xff0066ff, 0xff0067ff, 0xff0068ff, 0xff0069ff, 0xff006aff, 0xff006bff,
            0xff006cff, 0xff006dff, 0xff006eff, 0xff006fff, 0xff0070ff, 0xff0071ff,
            0xff0072ff, 0xff0073ff, 0xff0074ff, 0xff0075ff, 0xff0077ff, 0xff0078ff,
            0xff0079ff, 0xff007aff, 0xff007bff, 0xff007cff, 0xff007dff, 0xff007eff,
            0xff007fff, 0xff0080ff, 0xff0081ff, 0xff0082ff, 0xff0083ff, 0xff0084ff,
            0xff0085ff, 0xff0086ff, 0xff0088ff, 0xff0089ff, 0xff008aff, 0xff008bff,
            0xff008cff, 0xff008dff, 0xff008eff, 0xff008fff, 0xff0090ff, 0xff0091ff,
            0xff0092ff, 0xff0093ff, 0xff0094ff, 0xff0095ff, 0xff0096ff, 0xff0097ff,
            0xff0099ff, 0xff009aff, 0xff009bff, 0xff009cff, 0xff009dff, 0xff009eff,
            0xff009fff, 0xff00a0ff, 0xff00a1ff, 0xff00a2ff, 0xff00a3ff, 0xff00a4ff,
            0xff00a5ff, 0xff00a6ff, 0xff00a7ff, 0xff00a8ff, 0xff00aaff, 0xff00abff,
            0xff00acff, 0xff00adff, 0xff00aeff, 0xff00afff, 0xff00b0ff, 0xff00b1ff,
            0xff00b2ff, 0xff00b3ff, 0xff00b4ff, 0xff00b5ff, 0xff00b6ff, 0xff00b7ff,
            0xff00b8ff, 0xff00b9ff, 0xff00bbff, 0xff00bcff, 0xff00bdff, 0xff00beff,
            0xff00bfff, 0xff00c0ff, 0xff00c1ff, 0xff00c2ff, 0xff00c3ff, 0xff00c4ff,
            0xff00c5ff, 0xff00c6ff, 0xff00c7ff, 0xff00c8ff, 0xff00c9ff, 0xff00caff,
            0xff00ccff, 0xff00cdff, 0xff00ceff, 0xff00cfff, 0xff00d0ff, 0xff00d1ff,
            0xff00d2ff, 0xff00d3ff, 0xff00d4ff, 0xff00d5ff, 0xff00d6ff, 0xff00d7ff,
            0xff00d8ff, 0xff00d9ff, 0xff00daff, 0xff00dbff, 0xff00ddff, 0xff00deff,
            0xff00dfff, 0xff00e0ff, 0xff00e1ff, 0xff00e2ff, 0xff00e3ff, 0xff00e4ff,
            0xff00e5ff, 0xff00e6ff, 0xff00e7ff, 0xff00e8ff, 0xff00e9ff, 0xff00eaff,
            0xff00ebff, 0xff00ecff, 0xff00eeff, 0xff00efff, 0xff00f0ff, 0xff00f1ff,
            0xff00f2ff, 0xff00f3ff, 0xff00f4ff, 0xff00f5ff, 0xff00f6ff, 0xff00f7ff,
            0xff00f8ff, 0xff00f9ff, 0xff00faff, 0xff00fbff, 0xff00fcff, 0xff00fdff,
            0xff00ffff, 0xff00fffe, 0xff00fffd, 0xff00fffc, 0xff00fffb, 0xff00fffa,
            0xff00fff9, 0xff00fff8, 0xff00fff7, 0xff00fff6, 0xff00fff5, 0xff00fff4,
            0xff00fff3, 0xff00fff2, 0xff00fff1, 0xff00fff0, 0xff00ffee, 0xff00ffed,
            0xff00ffec, 0xff00ffeb, 0xff00ffea, 0xff00ffe9, 0xff00ffe8, 0xff00ffe7,
            0xff00ffe6, 0xff00ffe5, 0xff00ffe4, 0xff00ffe3, 0xff00ffe2, 0xff00ffe1,
            0xff00ffe0, 0xff00ffdf, 0xff00ffdd, 0xff00ffdc, 0xff00ffdb, 0xff00ffda,
            0xff00ffd9, 0xff00ffd8, 0xff00ffd7, 0xff00ffd6, 0xff00ffd5, 0xff00ffd4,
            0xff00ffd3, 0xff00ffd2, 0xff00ffd1, 0xff00ffd0, 0xff00ffcf, 0xff00ffce,
            0xff00ffcc, 0xff00ffcb, 0xff00ffca, 0xff00ffc9, 0xff00ffc8, 0xff00ffc7,
            0xff00ffc6, 0xff00ffc5, 0xff00ffc4, 0xff00ffc3, 0xff00ffc2, 0xff00ffc1,
            0xff00ffc0, 0xff00ffbf, 0xff00ffbe, 0xff00ffbd, 0xff00ffbb, 0xff00ffba,
            0xff00ffb9, 0xff00ffb8, 0xff00ffb7, 0xff00ffb6, 0xff00ffb5, 0xff00ffb4,
            0xff00ffb3, 0xff00ffb2, 0xff00ffb1, 0xff00ffb0, 0xff00ffaf, 0xff00ffae,
            0xff00ffad, 0xff00ffac, 0xff00ffaa, 0xff00ffa9, 0xff00ffa8, 0xff00ffa7,
            0xff00ffa6, 0xff00ffa5, 0xff00ffa4, 0xff00ffa3, 0xff00ffa2, 0xff00ffa1,
            0xff00ffa0, 0xff00ff9f, 0xff00ff9e, 0xff00ff9d, 0xff00ff9c, 0xff00ff9b,
            0xff00ff99, 0xff00ff98, 0xff00ff97, 0xff00ff96, 0xff00ff95, 0xff00ff94,
            0xff00ff93, 0xff00ff92, 0xff00ff91, 0xff00ff90, 0xff00ff8f, 0xff00ff8e,
            0xff00ff8d, 0xff00ff8c, 0xff00ff8b, 0xff00ff8a, 0xff00ff88, 0xff00ff87,
            0xff00ff86, 0xff00ff85, 0xff00ff84, 0xff00ff83, 0xff00ff82, 0xff00ff81,
            0xff00ff80, 0xff00ff7f, 0xff00ff7e, 0xff00ff7d, 0xff00ff7c, 0xff00ff7b,
            0xff00ff7a, 0xff00ff79, 0xff00ff77, 0xff00ff76, 0xff00ff75, 0xff00ff74,
            0xff00ff73, 0xff00ff72, 0xff00ff71, 0xff00ff70, 0xff00ff6f, 0xff00ff6e,
            0xff00ff6d, 0xff00ff6c, 0xff00ff6b, 0xff00ff6a, 0xff00ff69, 0xff00ff68,
            0xff00ff66, 0xff00ff65, 0xff00ff64, 0xff00ff63, 0xff00ff62, 0xff00ff61,
            0xff00ff60, 0xff00ff5f, 0xff00ff5e, 0xff00ff5d, 0xff00ff5c, 0xff00ff5b,
            0xff00ff5a, 0xff00ff59, 0xff00ff58, 0xff00ff57, 0xff00ff55, 0xff00ff54,
            0xff00ff53, 0xff00ff52, 0xff00ff51, 0xff00ff50, 0xff00ff4f, 0xff00ff4e,
            0xff00ff4d, 0xff00ff4c, 0xff00ff4b, 0xff00ff4a, 0xff00ff49, 0xff00ff48,
            0xff00ff47, 0xff00ff46, 0xff00ff44, 0xff00ff43, 0xff00ff42, 0xff00ff41,
            0xff00ff40, 0xff00ff3f, 0xff00ff3e, 0xff00ff3d, 0xff00ff3c, 0xff00ff3b,
            0xff00ff3a, 0xff00ff39, 0xff00ff38, 0xff00ff37, 0xff00ff36, 0xff00ff35,
            0xff00ff33, 0xff00ff32, 0xff00ff31, 0xff00ff30, 0xff00ff2f, 0xff00ff2e,
            0xff00ff2d, 0xff00ff2c, 0xff00ff2b, 0xff00ff2a, 0xff00ff29, 0xff00ff28,
            0xff00ff27, 0xff00ff26, 0xff00ff25, 0xff00ff24, 0xff00ff22, 0xff00ff21,
            0xff00ff20, 0xff00ff1f, 0xff00ff1e, 0xff00ff1d, 0xff00ff1c, 0xff00ff1b,
            0xff00ff1a, 0xff00ff19, 0xff00ff18, 0xff00ff17, 0xff00ff16, 0xff00ff15,
            0xff00ff14, 0xff00ff13, 0xff00ff11, 0xff00ff10, 0xff00ff0f, 0xff00ff0e,
            0xff00ff0d, 0xff00ff0c, 0xff00ff0b, 0xff00ff0a, 0xff00ff09, 0xff00ff08,
            0xff00ff07, 0xff00ff06, 0xff00ff05, 0xff00ff04, 0xff00ff03, 0xff00ff02,
            0xff00ff00, 0xff01ff00, 0xff02ff00, 0xff03ff00, 0xff04ff00, 0xff05ff00,
            0xff06ff00, 0xff07ff00, 0xff08ff00, 0xff09ff00, 0xff0aff00, 0xff0bff00,
            0xff0cff00, 0xff0dff00, 0xff0eff00, 0xff0fff00, 0xff11ff00, 0xff12ff00,
            0xff13ff00, 0xff14ff00, 0xff15ff00, 0xff16ff00, 0xff17ff00, 0xff18ff00,
            0xff19ff00, 0xff1aff00, 0xff1bff00, 0xff1cff00, 0xff1dff00, 0xff1eff00,
            0xff1fff00, 0xff20ff00, 0xff22ff00, 0xff23ff00, 0xff24ff00, 0xff25ff00,
            0xff26ff00, 0xff27ff00, 0xff28ff00, 0xff29ff00, 0xff2aff00, 0xff2bff00,
            0xff2cff00, 0xff2dff00, 0xff2eff00, 0xff2fff00, 0xff30ff00, 0xff31ff00,
            0xff33ff00, 0xff34ff00, 0xff35ff00, 0xff36ff00, 0xff37ff00, 0xff38ff00,
            0xff39ff00, 0xff3aff00, 0xff3bff00, 0xff3cff00, 0xff3dff00, 0xff3eff00,
            0xff3fff00, 0xff40ff00, 0xff41ff00, 0xff42ff00, 0xff44ff00, 0xff45ff00,
            0xff46ff00, 0xff47ff00, 0xff48ff00, 0xff49ff00, 0xff4aff00, 0xff4bff00,
            0xff4cff00, 0xff4dff00, 0xff4eff00, 0xff4fff00, 0xff50ff00, 0xff51ff00,
            0xff52ff00, 0xff53ff00, 0xff55ff00, 0xff56ff00, 0xff57ff00, 0xff58ff00,
            0xff59ff00, 0xff5aff00, 0xff5bff00, 0xff5cff00, 0xff5dff00, 0xff5eff00,
            0xff5fff00, 0xff60ff00, 0xff61ff00, 0xff62ff00, 0xff63ff00, 0xff64ff00,
            0xff66ff00, 0xff67ff00, 0xff68ff00, 0xff69ff00, 0xff6aff00, 0xff6bff00,
            0xff6cff00, 0xff6dff00, 0xff6eff00, 0xff6fff00, 0xff70ff00, 0xff71ff00,
            0xff72ff00, 0xff73ff00, 0xff74ff00, 0xff75ff00, 0xff77ff00, 0xff78ff00,
            0xff79ff00, 0xff7aff00, 0xff7bff00, 0xff7cff00, 0xff7dff00, 0xff7eff00,
            0xff7fff00, 0xff80ff00, 0xff81ff00, 0xff82ff00, 0xff83ff00, 0xff84ff00,
            0xff85ff00, 0xff86ff00, 0xff88ff00, 0xff89ff00, 0xff8aff00, 0xff8bff00,
            0xff8cff00, 0xff8dff00, 0xff8eff00, 0xff8fff00, 0xff90ff00, 0xff91ff00,
            0xff92ff00, 0xff93ff00, 0xff94ff00, 0xff95ff00, 0xff96ff00, 0xff97ff00,
            0xff99ff00, 0xff9aff00, 0xff9bff00, 0xff9cff00, 0xff9dff00, 0xff9eff00,
            0xff9fff00, 0xffa0ff00, 0xffa1ff00, 0xffa2ff00, 0xffa3ff00, 0xffa4ff00,
            0xffa5ff00, 0xffa6ff00, 0xffa7ff00, 0xffa8ff00, 0xffaaff00, 0xffabff00,
            0xffacff00, 0xffadff00, 0xffaeff00, 0xffafff00, 0xffb0ff00, 0xffb1ff00,
            0xffb2ff00, 0xffb3ff00, 0xffb4ff00, 0xffb5ff00, 0xffb6ff00, 0xffb7ff00,
            0xffb8ff00, 0xffb9ff00, 0xffbbff00, 0xffbcff00, 0xffbdff00, 0xffbeff00,
            0xffbfff00, 0xffc0ff00, 0xffc1ff00, 0xffc2ff00, 0xffc3ff00, 0xffc4ff00,
            0xffc5ff00, 0xffc6ff00, 0xffc7ff00, 0xffc8ff00, 0xffc9ff00, 0xffcaff00,
            0xffccff00, 0xffcdff00, 0xffceff00, 0xffcfff00, 0xffd0ff00, 0xffd1ff00,
            0xffd2ff00, 0xffd3ff00, 0xffd4ff00, 0xffd5ff00, 0xffd6ff00, 0xffd7ff00,
            0xffd8ff00, 0xffd9ff00, 0xffdaff00, 0xffdbff00, 0xffddff00, 0xffdeff00,
            0xffdfff00, 0xffe0ff00, 0xffe1ff00, 0xffe2ff00, 0xffe3ff00, 0xffe4ff00,
            0xffe5ff00, 0xffe6ff00, 0xffe7ff00, 0xffe8ff00, 0xffe9ff00, 0xffeaff00,
            0xffebff00, 0xffecff00, 0xffeeff00, 0xffefff00, 0xfff0ff00, 0xfff1ff00,
            0xfff2ff00, 0xfff3ff00, 0xfff4ff00, 0xfff5ff00, 0xfff6ff00, 0xfff7ff00,
            0xfff8ff00, 0xfff9ff00, 0xfffaff00, 0xfffbff00, 0xfffcff00, 0xfffdff00,
            0xffffff00, 0xfffffe00, 0xfffffd00, 0xfffffc00, 0xfffffb00, 0xfffffa00,
            0xfffff900, 0xfffff800, 0xfffff700, 0xfffff600, 0xfffff500, 0xfffff400,
            0xfffff300, 0xfffff200, 0xfffff100, 0xfffff000, 0xffffee00, 0xffffed00,
            0xffffec00, 0xffffeb00, 0xffffea00, 0xffffe900, 0xffffe800, 0xffffe700,
            0xffffe600, 0xffffe500, 0xffffe400, 0xffffe300, 0xffffe200, 0xffffe100,
            0xffffe000, 0xffffdf00, 0xffffdd00, 0xffffdc00, 0xffffdb00, 0xffffda00,
            0xffffd900, 0xffffd800, 0xffffd700, 0xffffd600, 0xffffd500, 0xffffd400,
            0xffffd300, 0xffffd200, 0xffffd100, 0xffffd000, 0xffffcf00, 0xffffce00,
            0xffffcc00, 0xffffcb00, 0xffffca00, 0xffffc900, 0xffffc800, 0xffffc700,
            0xffffc600, 0xffffc500, 0xffffc400, 0xffffc300, 0xffffc200, 0xffffc100,
            0xffffc000, 0xffffbf00, 0xffffbe00, 0xffffbd00, 0xffffbb00, 0xffffba00,
            0xffffb900, 0xffffb800, 0xffffb700, 0xffffb600, 0xffffb500, 0xffffb400,
            0xffffb300, 0xffffb200, 0xffffb100, 0xffffb000, 0xffffaf00, 0xffffae00,
            0xffffad00, 0xffffac00, 0xffffaa00, 0xffffa900, 0xffffa800, 0xffffa700,
            0xffffa600, 0xffffa500, 0xffffa400, 0xffffa300, 0xffffa200, 0xffffa100,
            0xffffa000, 0xffff9f00, 0xffff9e00, 0xffff9d00, 0xffff9c00, 0xffff9b00,
            0xffff9900, 0xffff9800, 0xffff9700, 0xffff9600, 0xffff9500, 0xffff9400,
            0xffff9300, 0xffff9200, 0xffff9100, 0xffff9000, 0xffff8f00, 0xffff8e00,
            0xffff8d00, 0xffff8c00, 0xffff8b00, 0xffff8a00, 0xffff8800, 0xffff8700,
            0xffff8600, 0xffff8500, 0xffff8400, 0xffff8300, 0xffff8200, 0xffff8100,
            0xffff8000, 0xffff7f00, 0xffff7e00, 0xffff7d00, 0xffff7c00, 0xffff7b00,
            0xffff7a00, 0xffff7900, 0xffff7700, 0xffff7600, 0xffff7500, 0xffff7400,
            0xffff7300, 0xffff7200, 0xffff7100, 0xffff7000, 0xffff6f00, 0xffff6e00,
            0xffff6d00, 0xffff6c00, 0xffff6b00, 0xffff6a00, 0xffff6900, 0xffff6800,
            0xffff6600, 0xffff6500, 0xffff6400, 0xffff6300, 0xffff6200, 0xffff6100,
            0xffff6000, 0xffff5f00, 0xffff5e00, 0xffff5d00, 0xffff5c00, 0xffff5b00,
            0xffff5a00, 0xffff5900, 0xffff5800, 0xffff5700, 0xffff5500, 0xffff5400,
            0xffff5300, 0xffff5200, 0xffff5100, 0xffff5000, 0xffff4f00, 0xffff4e00,
            0xffff4d00, 0xffff4c00, 0xffff4b00, 0xffff4a00, 0xffff4900, 0xffff4800,
            0xffff4700, 0xffff4600, 0xffff4400, 0xffff4300, 0xffff4200, 0xffff4100,
            0xffff4000, 0xffff3f00, 0xffff3e00, 0xffff3d00, 0xffff3c00, 0xffff3b00,
            0xffff3a00, 0xffff3900, 0xffff3800, 0xffff3700, 0xffff3600, 0xffff3500,
            0xffff3300, 0xffff3200, 0xffff3100, 0xffff3000, 0xffff2f00, 0xffff2e00,
            0xffff2d00, 0xffff2c00, 0xffff2b00, 0xffff2a00, 0xffff2900, 0xffff2800,
            0xffff2700, 0xffff2600, 0xffff2500, 0xffff2400, 0xffff2200, 0xffff2100,
            0xffff2000, 0xffff1f00, 0xffff1e00, 0xffff1d00, 0xffff1c00, 0xffff1b00,
            0xffff1a00, 0xffff1900, 0xffff1800, 0xffff1700, 0xffff1600, 0xffff1500,
            0xffff1400, 0xffff1300, 0xffff1100, 0xffff1000, 0xffff0f00, 0xffff0e00,
            0xffff0d00, 0xffff0c00, 0xffff0b00, 0xffff0a00, 0xffff0900, 0xffff0800,
            0xffff0700, 0xffff0600, 0xffff0500, 0xffff0400, 0xffff0300, 0xffff0200
    };

    public static final int STEP_COUNT = 1440;
    public static final float DEGREES_PER_STEP = 0.25f;

    private float m_HueAngleDegrees;

    private int[] m_RedPad = new int[255];
    private int[] m_GreenPad = new int[255];
    private int[] m_BluePad = new int[255];

    private int[] m_WhiteoutTable = new int[255];
    private int[] m_BlackoutTable = new int[255];

    public ColorMap1440() {
        m_HueAngleDegrees = 0.0f;
        update_blackout_table();
        update_whiteout_table();
    }

    public float getHueAngleDegrees() {
        return m_HueAngleDegrees;
    }

    public void setHueAngleDegrees(float hue_angle_degrees) {
        m_HueAngleDegrees = hue_angle_degrees;

        update_blackout_table();
        update_whiteout_table();
    }

    public int getPrimaryHue() {
        float primary_hue_appx = (m_HueAngleDegrees / 0.25f);
        int primary_hue_index = Math.round(primary_hue_appx) % STEP_COUNT;

        return HUE_ARGB_COLOR_1440_STEP_TABLE[primary_hue_index];
    }

    public int[] getPrimaryHueGradientTable(){
        return HUE_GRADIENT_1440_STEP_TABLE;
    }

    public int[] getPrimaryHueColorTable(){
        return HUE_ARGB_COLOR_1440_STEP_TABLE;
    }

    public int[] getBlackoutColorTable() {
        return m_BlackoutTable;
    }

    public int[] getWhiteoutColorTable() {
        return m_WhiteoutTable;
    }

    private void update_blackout_table() {
        float primary_hue_appx = (m_HueAngleDegrees / 0.25f);
        int primary_hue_index = Math.round(primary_hue_appx) % STEP_COUNT;

        int primary_hue = HUE_ARGB_COLOR_1440_STEP_TABLE[primary_hue_index];

        float red_comp = (float)((primary_hue & 0x00ff0000) >>> 16);
        float green_comp = (float)((primary_hue & 0x0000ff00) >>> 8);
        float blue_comp = (float)(primary_hue & 0x000000ff);

        blackout_scratch_pad(red_comp, m_RedPad);
        blackout_scratch_pad(green_comp, m_GreenPad);
        blackout_scratch_pad(blue_comp, m_BluePad);

        for (int cindex = 0; cindex < 255; cindex++) {
            int bo_hue = 0xff000000 | (m_RedPad[cindex] << 16) | (m_GreenPad[cindex] << 8) | m_BluePad[cindex];
            m_BlackoutTable[cindex] = bo_hue;
        }
    }

    private void update_whiteout_table() {
        float primary_hue_appx = (m_HueAngleDegrees / 0.25f);
        int primary_hue_index = Math.round(primary_hue_appx) % STEP_COUNT;

        int primary_hue = HUE_ARGB_COLOR_1440_STEP_TABLE[primary_hue_index];

        float red_comp = (float)((primary_hue & 0x00ff0000) >>> 16);
        float green_comp = (float)((primary_hue & 0x0000ff00) >>> 8);
        float blue_comp = (float)(primary_hue & 0x000000ff);

        whiteout_scratch_pad(red_comp, m_RedPad);
        whiteout_scratch_pad(green_comp, m_GreenPad);
        whiteout_scratch_pad(blue_comp, m_BluePad);

        for (int cindex = 0; cindex < 255; cindex++) {
            int wo_hue = 0xff000000 | (m_RedPad[cindex] << 16) | (m_GreenPad[cindex] << 8) | m_BluePad[cindex];
            m_WhiteoutTable[cindex] = wo_hue;
        }
    }

    private void blackout_scratch_pad(float comp_value, int[] comp_pad) {
        float comp_step = comp_value / -255.0f;
        float nxt_val = comp_value;

        for (int cindex = 0; cindex < 255; cindex++){
            if (nxt_val <= 0) {
                comp_pad[cindex] = 0;
            }
            else {
                comp_pad[cindex] = Math.round(nxt_val);
            }
            nxt_val += comp_step;
        }
    }

    private void whiteout_scratch_pad(float comp_value, int[] comp_pad) {
        float comp_step = (255.0f - comp_value) / 255.0f;
        float nxt_val = comp_value;

        for (int cindex = 0; cindex < 255; cindex++){
            if (nxt_val >= 255.0f) {
                comp_pad[cindex] = 0xff;
            }
            else {
                comp_pad[cindex] = Math.round(nxt_val);
            }
            nxt_val += comp_step;
        }
    }

}
